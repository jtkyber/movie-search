{"version":3,"sources":["model.js","components/moreInfo/MoreInfo.js","components/listViewMovie/ListViewMovie.js","components/cardViewMovie/CardViewMovie.js","components/movieList/MovieList.js","components/toggleViewIcon/ToggleViewIcon.js","App.js","reportWebVitals.js","index.js"],"names":["model","stored","persist","cardView","favorites","storage","currentSearch","movieResults","selectedMovie","onFavoritesPage","isFavorite","setCurrentSearch","action","state","input","toggleCardView","setMovieResults","mList","setSelectedMovie","movie","addToFavorites","data","movieFound","imdbID","push","Poster","poster","Title","title","Type","type","Year","year","removeFromFavorites","id","favs","i","length","splice","toggleOnFavoritesPage","setIsFavorite","MoreInfo","props","m","useStoreState","useStoreActions","actions","useEffect","show","Modal","size","centered","className","style","backgroundImage","Header","closeButton","Body","Plot","Actors","Genre","Director","Writer","Production","Awards","BoxOffice","Language","Rated","imdbRating","Footer","Button","variant","onClick","onHide","ListViewMovie","useState","modalShow","setModalShow","getMovieInfo","a","fetch","res","json","movieInfo","console","log","src","alt","fav","isOnFavoritesList","CardViewMovie","MovieList","resultType","undefined","map","ToggleViewIcon","App","document","querySelector","setProperty","findMovies","movies","Search","addEventListener","e","keyCode","preventDefault","click","onChange","target","value","placeholder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","ReactDOM","render","getElementById"],"mappings":"mSA+EeA,EA7ED,CAGVC,OAAQC,YACJ,CACIC,UAAU,EACVC,UAAW,IAEf,CACIC,QAAS,iBAIjBC,cAAe,GACfC,aAAc,GACdC,cAAe,GACfC,iBAAiB,EACjBC,YAAY,EAMZC,iBAAkBC,aAAO,SAACC,EAAOC,GAC7BD,EAAMP,cAAgBQ,KAG1BC,eAAgBH,aAAO,SAAAC,GACnBA,EAAMZ,OAAOE,UAAYU,EAAMZ,OAAOE,YAG1Ca,gBAAiBJ,aAAO,SAACC,EAAOI,GAC5BJ,EAAMN,aAAeU,KAGzBC,iBAAkBN,aAAO,SAACC,EAAOM,GAC7BN,EAAML,cAAgBW,KAG1BC,eAAgBR,aAAO,SAACC,EAAOQ,GAC3B,IADoC,EAChCC,GAAa,EADmB,cAEtBT,EAAMZ,OAAOG,WAFS,IAEpC,2BAAsC,SAC5BmB,SAAWF,EAAKE,SAClBD,GAAa,IAJe,8BAO/BA,GACDT,EAAMZ,OAAOG,UAAUoB,KACnB,CACIC,OAAQJ,EAAKK,OACbC,MAAON,EAAKO,MACZC,KAAMR,EAAKS,KACXC,KAAMV,EAAKW,KACXT,OAAQF,EAAKE,YAM7BU,oBAAqBrB,aAAO,SAACC,EAAOqB,GAEhC,IADA,IAAMC,EAAOtB,EAAMZ,OAAOG,UACjBgC,EAAI,EAAGA,EAAID,EAAKE,OAAQD,IACzBD,EAAKC,GAAGb,SAAWW,GACnBC,EAAKG,OAAOF,EAAG,MAK3BG,sBAAuB3B,aAAO,SAAAC,GAC1BA,EAAMJ,iBAAmBI,EAAMJ,mBAGnC+B,cAAe5B,aAAO,SAACC,EAAOC,GAC1BD,EAAMH,WAAaI,M,+ECuCZ2B,EA7GE,SAACC,GAChB,IAAMC,EAAID,EAAMvB,MAChB,EAAkCyB,aAAc,SAAA/B,GAAK,MAAK,CACxDT,UAAWS,EAAMZ,OAAOG,UACxBM,WAAYG,EAAMH,eAFZN,EAAR,EAAQA,UAAWM,EAAnB,EAAmBA,WAInB,EAA6DmC,aAAgB,SAAAC,GAAO,MAAK,CACvF1B,eAAgB0B,EAAQ1B,eACxBa,oBAAqBa,EAAQb,oBAC7BO,cAAeM,EAAQN,kBAHlBpB,EAAP,EAAOA,eAAgBa,EAAvB,EAAuBA,oBAAqBO,EAA5C,EAA4CA,cAS5CO,qBAAU,WACR,IAAmB,IAAfL,EAAMM,KACV,CAAC,IAAD,gBACoB5C,GADpB,IACE,2BAA6B,CAAC,IAArBe,EAAoB,QAC3B,GAAIwB,EAAEpB,SAAWJ,EAAMI,OACrB,OAAOiB,GAAc,IAH3B,8BAMEA,GAAc,MAEf,CAACE,EAAMM,OAeV,OAEI,aADA,CACCC,EAAA,EAAD,2BACMP,GADN,IAEEQ,KAAK,KACL,kBAAgB,gCAChBC,UAAQ,EAJV,SAMA,qBAAKC,UAAU,iBAAiBC,MAAO,CAACC,gBAAgB,OAAD,OAASX,EAAElB,OAAX,MAAvD,SACE,sBAAK2B,UAAU,iBAAf,UACE,cAACH,EAAA,EAAMM,OAAP,CAAcC,aAAW,EAAzB,SACE,cAACP,EAAA,EAAMtB,MAAP,CAAaO,GAAG,gCAAhB,SACGS,EAAEhB,UAGP,cAACsB,EAAA,EAAMQ,KAAP,UACE,sBAAKL,UAAU,YAAf,UACE,+BAAKT,EAAEd,KAAP,KAAec,EAAEZ,KAAjB,OACA,8BACE,sCADF,IACgBY,EAAEe,QAElB,8BACE,wCADF,IACkBf,EAAEgB,UAEpB,8BACE,uCADF,IACiBhB,EAAEiB,SAEnB,8BACE,6CADF,IACuBjB,EAAEkB,YAEzB,8BACE,2CADF,IACqBlB,EAAEmB,UAEvB,8BACE,4CADF,IACsBnB,EAAEoB,cAExB,8BACE,wCADF,IACkBpB,EAAEqB,UAEpB,8BACE,4CADF,IACsBrB,EAAEsB,aAExB,8BACE,6CADF,IACuBtB,EAAEuB,YAEzB,8BACE,uCADF,IACiBvB,EAAEwB,SAEnB,8BACE,6CADF,IACuBxB,EAAEyB,mBAI7B,eAACnB,EAAA,EAAMoB,OAAP,WAEE,cAACC,EAAA,EAAD,CACEC,QAAU7D,EAA0B,SAAb,UACvB8D,QAnEY,WAClB9D,GAIFuB,EAAoBU,EAAEpB,QACtBiB,GAAc,KAJdpB,EAAe,CAACM,OAAQiB,EAAElB,OAAQG,MAAOe,EAAEhB,MAAOG,KAAMa,EAAEd,KAAMG,KAAMW,EAAEZ,KAAMR,OAAQoB,EAAEpB,SACxFiB,GAAc,KAiENY,UAAY1C,EAAiC,oBAApB,iBAH3B,SAIIA,EAAmC,wBAAtB,qBAEjB,cAAC4D,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS9B,EAAM+B,OAA3C,+BC1BGC,G,MA3EO,SAAC,GAAe,IAAbvD,EAAY,EAAZA,MAErB,EAAkCwD,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAqDjC,aAAc,SAAA/B,GAAK,MAAK,CACzEL,cAAeK,EAAML,cACrBC,gBAAiBI,EAAMJ,gBACvBL,UAAWS,EAAMZ,OAAOG,cAHpBI,EAAR,EAAQA,cAAeC,EAAvB,EAAuBA,gBAAiBL,EAAxC,EAAwCA,UAKxC,EAAiDyC,aAAgB,SAAAC,GAAO,MAAK,CACzEb,oBAAqBa,EAAQb,oBAC7Bf,iBAAkB4B,EAAQ5B,qBAFtBe,EAAR,EAAQA,oBAAqBf,EAA7B,EAA6BA,iBASvB4D,EAAY,uCAAG,8BAAAC,EAAA,+EAEGC,MAAM,6DAAD,OAA8D7D,EAAMI,QAAU,CACrG,OAAU,MACV,QAAW,CACT,iBAAkB,qDAClB,kBAAmB,oDANN,cAET0D,EAFS,gBASSA,EAAIC,OATb,OASTC,EATS,OAUfjE,EAAiBiE,GACjBN,GAAa,GAXE,kDAafO,QAAQC,IAAR,MAbe,0DAAH,qDA0BlB,OACI,qCACI,sBAAKb,QAASM,EAAc1B,UAAU,gBAAtC,UACI,qBAAKA,UAAU,aAAf,SACI,qBAAKkC,IAAKnE,EAAMM,OAAQ8D,IAAI,aAEhC,qBAAKnC,UAAU,YAAf,SACI,6BAAKjC,EAAMQ,UAEf,qBAAKyB,UAAU,WAAf,SACI,6BAAKjC,EAAMU,SAEf,qBAAKuB,UAAU,WAAf,SACI,6BAAKjC,EAAMY,SAEf,qBAAKqB,UAAU,cAAf,SACI,6BAzBY,WAAO,IAAD,gBACdhD,GADc,IAC9B,2BAA2B,CAAC,IAAnBoF,EAAkB,QACvB,GAAIrE,EAAMI,SAAWiE,EAAIjE,OACvB,OAAO,GAHiB,8BAM9B,OAAO,EAmBUkE,KAAwBhF,EAAkB,IAAM,SAKrDA,EACE,wBAAQ+D,QAAS,kBAAMvC,EAAoBd,EAAMI,SAAS6B,UAAU,kBAApE,eACA,QAIV,cAAC,EAAD,CAAUjC,MAAOX,EAAewC,KAAM4B,EAAWH,OAAQ,kBAAMI,GAAa,WCKzEa,G,MA3EO,SAAC,GAAe,IAAbvE,EAAY,EAAZA,MAErB,EAAkCwD,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAqDjC,aAAc,SAAA/B,GAAK,MAAK,CACzEL,cAAeK,EAAML,cACrBC,gBAAiBI,EAAMJ,gBACvBL,UAAWS,EAAMZ,OAAOG,cAHpBI,EAAR,EAAQA,cAAeC,EAAvB,EAAuBA,gBAAiBL,EAAxC,EAAwCA,UAKxC,EAAiDyC,aAAgB,SAAAC,GAAO,MAAK,CACzEb,oBAAqBa,EAAQb,oBAC7Bf,iBAAkB4B,EAAQ5B,qBAFtBe,EAAR,EAAQA,oBAAqBf,EAA7B,EAA6BA,iBASvB4D,EAAY,uCAAG,8BAAAC,EAAA,+EAEGC,MAAM,6DAAD,OAA8D7D,EAAMI,QAAU,CACrG,OAAU,MACV,QAAW,CACT,iBAAkB,qDAClB,kBAAmB,oDANN,cAET0D,EAFS,gBASSA,EAAIC,OATb,OASTC,EATS,OAUfjE,EAAiBiE,GACjBN,GAAa,GAXE,kDAafO,QAAQC,IAAR,MAbe,0DAAH,qDA0BlB,OACI,qCACI,sBAAKb,QAASM,EAAc1B,UAAU,gBAAtC,UACI,qBAAKA,UAAU,aAAf,SACI,qBAAKkC,IAAKnE,EAAMM,OAAQ8D,IAAI,aAEhC,qBAAKnC,UAAU,YAAf,SACI,6BAAKjC,EAAMQ,UAEf,qBAAKyB,UAAU,WAAf,SACI,6BAAKjC,EAAMU,SAEf,qBAAKuB,UAAU,WAAf,SACI,6BAAKjC,EAAMY,SAEf,qBAAKqB,UAAU,cAAf,SACI,6BAzBU,WAAO,IAAD,gBACZhD,GADY,IAC5B,2BAA2B,CAAC,IAAnBoF,EAAkB,QACvB,GAAIrE,EAAMI,SAAWiE,EAAIjE,OACvB,OAAO,GAHe,8BAM5B,OAAO,EAmBUkE,KAAwBhF,EAAkB,IAAM,SAKrDA,EACE,wBAAQ+D,QAAS,kBAAMvC,EAAoBd,EAAMI,SAAS6B,UAAU,kBAApE,eACA,QAIV,cAAC,EAAD,CAAUjC,MAAOX,EAAewC,KAAM4B,EAAWH,OAAQ,kBAAMI,GAAa,WCnCzEc,EApCG,WACd,MAA+D/C,aAAc,SAAA/B,GAAK,MAAK,CACnFV,SAAUU,EAAMZ,OAAOE,SACvBI,aAAcM,EAAMN,aACpBE,gBAAiBI,EAAMJ,gBACvBL,UAAWS,EAAMZ,OAAOG,cAJpBD,EAAR,EAAQA,SAAUI,EAAlB,EAAkBA,aAAcE,EAAhC,EAAgCA,gBAAiBL,EAAjD,EAAiDA,UAS3CwF,EAAa,WACf,OAAInF,EACOL,EACGG,GAGlB,OACI,wCAEqBsF,IAAjBD,IAIEA,IAAaE,KAAI,SAAA3E,GACf,OACIhB,EACE,cAAC,EAAD,CAAkCgB,MAAOA,GAArBA,EAAMI,QAC1B,cAAC,EAAD,CAAkCJ,MAAOA,GAArBA,EAAMI,WAGhC,QCEDwE,G,MAjCQ,WACnB,IAAM5F,EAAWyC,aAAc,SAAA/B,GAAK,OAAIA,EAAMZ,OAAOE,YAC/CY,EAAiB8B,aAAgB,SAAAC,GAAO,OAAIA,EAAQ/B,kBAK1D,OACiB,IAAbZ,EAEA,sBAAKqE,QAASzD,EAAgBqC,UAAU,8BAAxC,UACI,qBAAKA,UAAU,UACf,qBAAKA,UAAU,UACf,qBAAKA,UAAU,UACf,qBAAKA,UAAU,UACf,qBAAKA,UAAU,UACf,qBAAKA,UAAU,UACf,qBAAKA,UAAU,UACf,qBAAKA,UAAU,UACf,qBAAKA,UAAU,aAGnB,sBAAKoB,QAASzD,EAAgBqC,UAAU,8BAAxC,UACI,qBAAKA,UAAU,QACf,qBAAKA,UAAU,SACf,qBAAKA,UAAU,QACf,qBAAKA,UAAU,SACf,qBAAKA,UAAU,QACf,qBAAKA,UAAU,c,YC+EZ4C,MAtGf,WACE,MAAgEpD,aAAc,SAAA/B,GAAK,MAAK,CACtFV,SAAUU,EAAMZ,OAAOE,SACvBM,gBAAiBI,EAAMJ,gBACvBH,cAAeO,EAAMP,cACrBF,UAAWS,EAAMZ,OAAOG,cAJlBD,EAAR,EAAQA,SAAUM,EAAlB,EAAkBA,gBAAiBH,EAAnC,EAAmCA,cAAeF,EAAlD,EAAkDA,UAOlD,EAAqEyC,aAAgB,SAAAC,GAAO,MAAK,CAC/F9B,gBAAiB8B,EAAQ9B,gBACzBuB,sBAAuBO,EAAQP,sBAC/B5B,iBAAkBmC,EAAQnC,qBAHpBK,EAAR,EAAQA,gBAAiBuB,EAAzB,EAAyBA,sBAAuB5B,EAAhD,EAAgDA,iBAMhDoC,qBAAU,WACR,IAAMyC,EAAMS,SAASC,cAAc,cAC9BzF,GACH+E,EAAInC,MAAM8C,YAAY,aAAtB,WAAwC/F,EAAUiC,OAAlD,QAED,CAACjC,IAEJ2C,qBAAU,WACR,IAAMyC,EAAMS,SAASC,cAAc,cAC9BzF,GACH+E,EAAInC,MAAM8C,YAAY,aAAtB,WAAwC/F,EAAUiC,OAAlD,QAED,CAAC5B,IAOJ,IAAM2F,EAAU,uCAAG,8BAAArB,EAAA,0DACbzE,EAAc+B,OADD,wBAEf1B,EAAiB,IAFF,kBAIKqE,MAAM,6DAAD,OAA8D1E,GAAiB,CACtG,OAAU,MACV,QAAW,CACT,iBAAkB,qDAClB,kBAAmB,oDARR,cAIP2E,EAJO,gBAWQA,EAAIC,OAXZ,OAWPmB,EAXO,OAYbrF,EAAgBqF,EAAOC,QAZV,kDAcblB,QAAQC,IAAR,MAda,0DAAH,qDA4BhB,OAPAY,SAASM,iBAAiB,WAAW,SAACC,GAClB,KAAdA,EAAEC,UACJD,EAAEE,iBACFT,SAASC,cAAc,UAAUS,YAKnC,sBAAKvD,UAAU,eAAf,UACE,iCACE,sBAAKA,UAAU,SAAf,UACE,sBAAKA,UAAU,cAAf,UAEE,cAACkB,EAAA,EAAD,CAAQE,QAASjC,EAAuBgC,QAAQ,oBAAoBnB,UAAW3C,EAAkB,OAAS,YAA1G,SAAwHA,EAAkB,OAAS,cACnJ,cAAC,EAAD,OAEF,qBAAK2C,UAAU,qBAAf,SAGE3C,EAEA,qBAAK2C,UAAU,qBAAf,SACE,oBAAIA,UAAU,UAAd,yBAGF,sBAAKA,UAAU,qBAAf,UAEE,uBAAOwD,SAAU,SAACJ,GAAD,OAAO7F,EAAiB6F,EAAEK,OAAOC,QAAQA,MAAOxG,EAAe8C,UAAU,YAAYtB,KAAK,OAAOiF,YAAY,kBAC9H,cAACzC,EAAA,EAAD,CAAQC,QAAQ,oBAAoBC,QAAS4B,EAAYhD,UAAU,QAAnE,8BAMR,qBAAKA,UAAU,OAAf,SACE,qBAAKA,UAAU,kBAAf,SAEE,qBAAKA,UAAYjD,EAAW,gBAAkB,gBAA9C,SACE,cAAC,EAAD,UAIN,+BC5FS6G,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCRQ,EAAQC,YAAY1H,GAE1B2H,IAASC,OACL,cAAC,IAAD,CAAeH,MAAOA,EAAtB,SACI,cAAC,EAAD,MAEJxB,SAAS4B,eAAe,SAM5Bb,M","file":"static/js/main.619d03ac.chunk.js","sourcesContent":["import { action, persist } from 'easy-peasy';\r\n\r\nconst model = {\r\n    // State\r\n\r\n    stored: persist(\r\n        {\r\n            cardView: false,\r\n            favorites: [],\r\n        },\r\n        {\r\n            storage: 'localStorage',\r\n        }\r\n    ),\r\n\r\n    currentSearch: '',\r\n    movieResults: [],\r\n    selectedMovie: {},\r\n    onFavoritesPage: false,\r\n    isFavorite: false,\r\n\r\n\r\n\r\n    // Actions\r\n\r\n    setCurrentSearch: action((state, input) => {\r\n        state.currentSearch = input;\r\n    }),\r\n\r\n    toggleCardView: action(state => {\r\n        state.stored.cardView = !state.stored.cardView;\r\n    }),\r\n\r\n    setMovieResults: action((state, mList) => {\r\n        state.movieResults = mList;\r\n    }),\r\n\r\n    setSelectedMovie: action((state, movie) => {\r\n        state.selectedMovie = movie;\r\n    }),\r\n\r\n    addToFavorites: action((state, data) => {\r\n        let movieFound = false;\r\n        for (let m of state.stored.favorites) {\r\n            if (m.imdbID === data.imdbID) {\r\n                movieFound = true;\r\n            }\r\n        }\r\n        if (!movieFound) {\r\n            state.stored.favorites.push(\r\n                {\r\n                    Poster: data.poster,\r\n                    Title: data.title,\r\n                    Type: data.type,\r\n                    Year: data.year,\r\n                    imdbID: data.imdbID\r\n                }\r\n            )\r\n        }\r\n    }),\r\n\r\n    removeFromFavorites: action((state, id) => {\r\n        const favs = state.stored.favorites;\r\n        for (let i = 0; i < favs.length; i++) {\r\n            if (favs[i].imdbID === id) {\r\n                favs.splice(i, 1);\r\n            }\r\n        }\r\n    }),\r\n\r\n    toggleOnFavoritesPage: action(state => {\r\n        state.onFavoritesPage = !state.onFavoritesPage;\r\n    }),\r\n\r\n    setIsFavorite: action((state, input) => {\r\n        state.isFavorite = input;\r\n    })\r\n}\r\n\r\nexport default model;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// bySearch: [\r\n//         {\r\n//             Title: \"The Lord of the Rings: The Fellowship of the Ring\",\r\n//             Year: \"2001\",\r\n//             imdbID: \"tt0120737\",\r\n//             Type: \"movie\",\r\n//             Poster: \"https://m.media-amazon.com/images/M/MV5BN2EyZjM3NzUtNWUzMi00MTgxLWI0NTctMzY4M2VlOTdjZWRiXkEyXkFqcGdeQXVyNDUzOTQ5MjY@._V1_SX300.jpg\"\r\n//         },\r\n//         {\r\n//             Title: \"The Lord of the Rings: The Return of the King\",\r\n//             Year: \"2003\",\r\n//             imdbID: \"tt0167260\",\r\n//             Type: \"movie\",\r\n//             Poster: \"https://m.media-amazon.com/images/M/MV5BNzA5ZDNlZWMtM2NhNS00NDJjLTk4NDItYTRmY2EwMWZlMTY3XkEyXkFqcGdeQXVyNzkwMjQ5NzM@._V1_SX300.jpg\"\r\n//         },\r\n//         {\r\n//             Title: \"The Lord of the Rings: The Two Towers\",\r\n//             Year: \"2002\",\r\n//             imdbID: \"tt0167261\",\r\n//             Type: \"movie\",\r\n//             Poster: \"https://m.media-amazon.com/images/M/MV5BZGMxZTdjZmYtMmE2Ni00ZTdkLWI5NTgtNjlmMjBiNzU2MmI5XkEyXkFqcGdeQXVyNjU0OTQ0OTY@._V1_SX300.jpg\"\r\n//         },\r\n//         {\r\n//             Title: \"The Lord of the Rings: The Two Towers\",\r\n//             Year: \"2002\",\r\n//             imdbID: \"tt01672610\",\r\n//             Type: \"movie\",\r\n//             Poster: \"https://m.media-amazon.com/images/M/MV5BZGMxZTdjZmYtMmE2Ni00ZTdkLWI5NTgtNjlmMjBiNzU2MmI5XkEyXkFqcGdeQXVyNjU0OTQ0OTY@._V1_SX300.jpg\"\r\n//         },\r\n//         {\r\n//             Title: \"The Lord of the Rings: The Two Towers\",\r\n//             Year: \"2002\",\r\n//             imdbID: \"tt016726100\",\r\n//             Type: \"movie\",\r\n//             Poster: \"https://m.media-amazon.com/images/M/MV5BZGMxZTdjZmYtMmE2Ni00ZTdkLWI5NTgtNjlmMjBiNzU2MmI5XkEyXkFqcGdeQXVyNjU0OTQ0OTY@._V1_SX300.jpg\"\r\n//         },\r\n//         {\r\n//             Title: \"The Lord of the Rings: The Two Towers\",\r\n//             Year: \"2002\",\r\n//             imdbID: \"tt0167261000\",\r\n//             Type: \"movie\",\r\n//             Poster: \"https://m.media-amazon.com/images/M/MV5BZGMxZTdjZmYtMmE2Ni00ZTdkLWI5NTgtNjlmMjBiNzU2MmI5XkEyXkFqcGdeQXVyNjU0OTQ0OTY@._V1_SX300.jpg\"\r\n//         },\r\n//         {\r\n//             Title: \"The Lord of the Rings: The Two Towers\",\r\n//             Year: \"2002\",\r\n//             imdbID: \"tt01672610000\",\r\n//             Type: \"movie\",\r\n//             Poster: \"https://m.media-amazon.com/images/M/MV5BZGMxZTdjZmYtMmE2Ni00ZTdkLWI5NTgtNjlmMjBiNzU2MmI5XkEyXkFqcGdeQXVyNjU0OTQ0OTY@._V1_SX300.jpg\"\r\n//         },\r\n//         {\r\n//             Title: \"The Lord of the Rings: The Two Towers\",\r\n//             Year: \"2002\",\r\n//             imdbID: \"tt016726100000\",\r\n//             Type: \"movie\",\r\n//             Poster: \"https://m.media-amazon.com/images/M/MV5BZGMxZTdjZmYtMmE2Ni00ZTdkLWI5NTgtNjlmMjBiNzU2MmI5XkEyXkFqcGdeQXVyNjU0OTQ0OTY@._V1_SX300.jpg\"\r\n//         }\r\n//     ],\r\n//     byIdOrTitle: [\r\n//         {\r\n//             Title: \"The Lord of the Rings: The Fellowship of the Ring\",\r\n//             Year: \"2001\",\r\n//             Rated: \"PG-13\",\r\n//             Released: \"19 Dec 2001\",\r\n//             Runtime: \"178 min\",\r\n//             Genre: \"Action, Adventure, Drama\",\r\n//             Director: \"Peter Jackson\",\r\n//             Writer: \"J.R.R. Tolkien, Fran Walsh, Philippa Boyens\",\r\n//             Actors: \"Elijah Wood, Ian McKellen, Orlando Bloom\",\r\n//             Plot: \"A meek Hobbit from the Shire and eight companions set out on a journey to destroy the powerful One Ring and save Middle-earth from the Dark Lord Sauron.\",\r\n//             Language: \"English, Sindarin\",\r\n//             Country: \"New Zealand, United States\",\r\n//             Awards: \"Won 4 Oscars. 120 wins & 126 nominations total\",\r\n//             Poster: \"https://m.media-amazon.com/images/M/MV5BN2EyZjM3NzUtNWUzMi00MTgxLWI0NTctMzY4M2VlOTdjZWRiXkEyXkFqcGdeQXVyNDUzOTQ5MjY@._V1_SX300.jpg\",\r\n//             Ratings: [\r\n//                 {\r\n//                     Source:\"Internet Movie Database\",\r\n//                     Value:\"8.8/10\"\r\n//                 },\r\n//                 {\r\n//                     Source:\"Rotten Tomatoes\",\r\n//                     Value:\"91%\"\r\n//                 },\r\n//                 {\r\n//                     Source:\"Metacritic\",\r\n//                     Value:\"92/100\"\r\n//                 },\r\n//             ],\r\n//             Metascore:\"92\",\r\n//             imdbRating:\"8.8\",\r\n//             imdbVotes:\"1,706,179\",\r\n//             imdbID:\"tt0120737\",\r\n//             Type:\"movie\",\r\n//             DVD:\"28 Jun 2011\",\r\n//             BoxOffice:\"$315,710,750\",\r\n//             Production:\"New Line Cinema, Saul Zaentz Company, WingNut Films\"\r\n//         },\r\n//         {\r\n//             Title: \"The Lord of the Rings: The Fellowship of the Ring\",\r\n//             Year: \"2001\",\r\n//             Rated: \"PG-13\",\r\n//             Released: \"19 Dec 2001\",\r\n//             Runtime: \"178 min\",\r\n//             Genre: \"Action, Adventure, Drama\",\r\n//             Director: \"Peter Jackson\",\r\n//             Writer: \"J.R.R. Tolkien, Fran Walsh, Philippa Boyens\",\r\n//             Actors: \"Elijah Wood, Ian McKellen, Orlando Bloom\",\r\n//             Plot: \"A meek Hobbit from the Shire and eight companions set out on a journey to destroy the powerful One Ring and save Middle-earth from the Dark Lord Sauron.\",\r\n//             Language: \"English, Sindarin\",\r\n//             Country: \"New Zealand, United States\",\r\n//             Awards: \"Won 4 Oscars. 120 wins & 126 nominations total\",\r\n//             Poster: \"https://m.media-amazon.com/images/M/MV5BN2EyZjM3NzUtNWUzMi00MTgxLWI0NTctMzY4M2VlOTdjZWRiXkEyXkFqcGdeQXVyNDUzOTQ5MjY@._V1_SX300.jpg\",\r\n//             Ratings: [\r\n//                 {\r\n//                     Source:\"Internet Movie Database\",\r\n//                     Value:\"8.8/10\"\r\n//                 },\r\n//                 {\r\n//                     Source:\"Rotten Tomatoes\",\r\n//                     Value:\"91%\"\r\n//                 },\r\n//                 {\r\n//                     Source:\"Metacritic\",\r\n//                     Value:\"92/100\"\r\n//                 },\r\n//             ],\r\n//             Metascore:\"92\",\r\n//             imdbRating:\"8.8\",\r\n//             imdbVotes:\"1,706,179\",\r\n//             imdbID:\"tt0120737\",\r\n//             Type:\"movie\",\r\n//             DVD:\"28 Jun 2011\",\r\n//             BoxOffice:\"$315,710,750\",\r\n//             Production:\"New Line Cinema, Saul Zaentz Company, WingNut Films\"\r\n//         },\r\n//         {\r\n//             Title: \"The Lord of the Rings: The Fellowship of the Ring\",\r\n//             Year: \"2001\",\r\n//             Rated: \"PG-13\",\r\n//             Released: \"19 Dec 2001\",\r\n//             Runtime: \"178 min\",\r\n//             Genre: \"Action, Adventure, Drama\",\r\n//             Director: \"Peter Jackson\",\r\n//             Writer: \"J.R.R. Tolkien, Fran Walsh, Philippa Boyens\",\r\n//             Actors: \"Elijah Wood, Ian McKellen, Orlando Bloom\",\r\n//             Plot: \"A meek Hobbit from the Shire and eight companions set out on a journey to destroy the powerful One Ring and save Middle-earth from the Dark Lord Sauron.\",\r\n//             Language: \"English, Sindarin\",\r\n//             Country: \"New Zealand, United States\",\r\n//             Awards: \"Won 4 Oscars. 120 wins & 126 nominations total\",\r\n//             Poster: \"https://m.media-amazon.com/images/M/MV5BN2EyZjM3NzUtNWUzMi00MTgxLWI0NTctMzY4M2VlOTdjZWRiXkEyXkFqcGdeQXVyNDUzOTQ5MjY@._V1_SX300.jpg\",\r\n//             Ratings: [\r\n//                 {\r\n//                     Source:\"Internet Movie Database\",\r\n//                     Value:\"8.8/10\"\r\n//                 },\r\n//                 {\r\n//                     Source:\"Rotten Tomatoes\",\r\n//                     Value:\"91%\"\r\n//                 },\r\n//                 {\r\n//                     Source:\"Metacritic\",\r\n//                     Value:\"92/100\"\r\n//                 },\r\n//             ],\r\n//             Metascore:\"92\",\r\n//             imdbRating:\"8.8\",\r\n//             imdbVotes:\"1,706,179\",\r\n//             imdbID:\"tt0120737\",\r\n//             Type:\"movie\",\r\n//             DVD:\"28 Jun 2011\",\r\n//             BoxOffice:\"$315,710,750\",\r\n//             Production:\"New Line Cinema, Saul Zaentz Company, WingNut Films\"\r\n//         }\r\n//     ],\r\n","import { useEffect } from 'react';\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport './MoreInfo.css';\r\n\r\nconst MoreInfo = (props) => {\r\n  const m = props.movie;\r\n  const { favorites, isFavorite } = useStoreState(state => ({\r\n    favorites: state.stored.favorites,\r\n    isFavorite: state.isFavorite\r\n  }));\r\n  const {addToFavorites, removeFromFavorites, setIsFavorite} = useStoreActions(actions => ({\r\n    addToFavorites: actions.addToFavorites,\r\n    removeFromFavorites: actions.removeFromFavorites,\r\n    setIsFavorite: actions.setIsFavorite\r\n  }));\r\n\r\n  // Whenever modal is shown, check if that result is inside 'favorites' state variable\r\n  // Set the 'isFavorite' state variable\r\n\r\n  useEffect(() => {\r\n    if (props.show === true)\r\n    {\r\n      for (let movie of favorites) {\r\n        if (m.imdbID === movie.imdbID) {\r\n          return setIsFavorite(true);\r\n        }\r\n      }\r\n      setIsFavorite(false);\r\n    }\r\n  }, [props.show])\r\n\r\n  // Add (only necessary keys and values) or remove result to/from favorites based on 'isFavorite' state variable\r\n  // Update 'setIsFavorite' state variable\r\n\r\n  const updateFavorites = () => {\r\n    if(!isFavorite) {\r\n      addToFavorites({poster: m.Poster, title: m.Title, type: m.Type, year: m.Year, imdbID: m.imdbID})\r\n      setIsFavorite(true);\r\n    } else {\r\n      removeFromFavorites(m.imdbID);\r\n      setIsFavorite(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n      //Bootstrap modal\r\n      <Modal\r\n        {...props}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n      <div className='modalContainer' style={{backgroundImage: `url(${m.Poster})`}}>\r\n        <div className='backgroundTint'>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n              {m.Title}\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className='modalBody'>\r\n              <h5>{m.Type} ({m.Year})</h5>\r\n              <p>\r\n                <b>Plot:</b> {m.Plot}\r\n              </p>\r\n              <p>\r\n                <b>Actors:</b> {m.Actors}\r\n              </p>\r\n              <p>\r\n                <b>Genre:</b> {m.Genre}\r\n              </p>\r\n              <p>\r\n                <b>Director(s):</b> {m.Director}\r\n              </p>\r\n              <p>\r\n                <b>Writer(s):</b> {m.Writer}\r\n              </p>\r\n              <p>\r\n                <b>Production:</b> {m.Production}\r\n              </p>\r\n              <p>\r\n                <b>Awards:</b> {m.Awards}\r\n              </p>\r\n              <p>\r\n                <b>Box Office:</b> {m.BoxOffice}\r\n              </p>\r\n              <p>\r\n                <b>Language(s):</b> {m.Language}\r\n              </p>\r\n              <p>\r\n                <b>Rated:</b> {m.Rated}\r\n              </p>\r\n              <p>\r\n                <b>IMDB Rating:</b> {m.imdbRating}\r\n              </p>\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            {/* Set btn appearance based on 'isFavorite' state variable. Add/remove from favorites on click */}\r\n            <Button\r\n              variant={!isFavorite ? \"success\" :  \"danger\"}\r\n              onClick={updateFavorites}\r\n              className={!isFavorite ? \"addfavoriteBtn\" :  \"removefavoriteBtn\"}>\r\n              {!isFavorite ? 'Add to Favorites' :  \"Remove from Favorites\"}\r\n              </Button>\r\n            <Button variant=\"secondary\" onClick={props.onHide}>Close</Button>\r\n          </Modal.Footer>\r\n        </div>\r\n      </div>\r\n      </Modal>\r\n  )\r\n}\r\n\r\nexport default MoreInfo;\r\n","import { useState } from 'react';\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\nimport MoreInfo from '../moreInfo/MoreInfo';\r\nimport './ListViewMovie.css';\r\n\r\nconst ListViewMovie = ({ movie }) => {\r\n    // Modal doesn't working correctly when 'modalShow' is in easy-peasy\r\n    const [modalShow, setModalShow] = useState(false);\r\n    const { selectedMovie, onFavoritesPage, favorites} = useStoreState(state => ({\r\n        selectedMovie: state.selectedMovie,\r\n        onFavoritesPage: state.onFavoritesPage,\r\n        favorites: state.stored.favorites\r\n    }));\r\n    const { removeFromFavorites, setSelectedMovie} = useStoreActions(actions => ({\r\n        removeFromFavorites: actions.removeFromFavorites,\r\n        setSelectedMovie: actions.setSelectedMovie\r\n    }));\r\n\r\n    // Fetch detailed info for a specific result\r\n    // Set the 'selectedMovie' state variable to the response\r\n    // Set the 'modalShow' state variable to true\r\n\r\n    const getMovieInfo = async () => {\r\n        try {\r\n          const res = await fetch(`https://movie-database-imdb-alternative.p.rapidapi.com/?i=${movie.imdbID}`, {\r\n          \"method\": \"GET\",\r\n          \"headers\": {\r\n            \"x-rapidapi-key\": \"387e27d97fmsh8e24e62224ddd7bp139e87jsn4629eff6112a\",\r\n            \"x-rapidapi-host\": \"movie-database-imdb-alternative.p.rapidapi.com\"\r\n          }\r\n        })\r\n          const movieInfo = await res.json();\r\n          setSelectedMovie(movieInfo);\r\n          setModalShow(true);\r\n        } catch(err) {\r\n          console.log(err);\r\n        }\r\n      }\r\n\r\n      const isOnFavoritesList = () => {\r\n        for (let fav of favorites) {\r\n            if (movie.imdbID === fav.imdbID) {\r\n              return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div onClick={getMovieInfo} className='listViewBlock'>\r\n                <div className='listPoster'>\r\n                    <img src={movie.Poster} alt='poster' />\r\n                </div>\r\n                <div className='listTitle'>\r\n                    <h5>{movie.Title}</h5>\r\n                </div>\r\n                <div className='listType'>\r\n                    <h6>{movie.Type}</h6>\r\n                </div>\r\n                <div className='listYear'>\r\n                    <h6>{movie.Year}</h6>\r\n                </div>\r\n                <div className='listFavIcon'>\r\n                    <h1>{isOnFavoritesList() && !onFavoritesPage ? '*' : null}</h1>\r\n                </div>\r\n                {\r\n                    // Add a quick remove button to each result if on favorites page\r\n                    // On click, remove result from 'favorites' state variable\r\n                    onFavoritesPage\r\n                    ? <button onClick={() => removeFromFavorites(movie.imdbID)} className='quickRemoveList'>X</button>\r\n                    : null\r\n                }\r\n            </div>\r\n            {/* Bootstrap modal component */}\r\n            <MoreInfo movie={selectedMovie} show={modalShow} onHide={() => setModalShow(false)} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ListViewMovie;\r\n","import { useState } from 'react';\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\nimport MoreInfo from '../moreInfo/MoreInfo';\r\nimport './CardViewMovie.css';\r\n\r\nconst CardViewMovie = ({ movie }) => {\r\n    // Modal doesn't work correctly when 'modalShow' is in easy-peasy\r\n    const [modalShow, setModalShow] = useState(false);\r\n    const { selectedMovie, onFavoritesPage, favorites} = useStoreState(state => ({\r\n        selectedMovie: state.selectedMovie,\r\n        onFavoritesPage: state.onFavoritesPage,\r\n        favorites: state.stored.favorites\r\n    }));\r\n    const { removeFromFavorites, setSelectedMovie} = useStoreActions(actions => ({\r\n        removeFromFavorites: actions.removeFromFavorites,\r\n        setSelectedMovie: actions.setSelectedMovie\r\n    }));\r\n\r\n    // Fetch detailed info for a specific result\r\n    // Set the 'selectedMovie' state variable to the response\r\n    // Set the 'modalShow' state variable to true\r\n\r\n    const getMovieInfo = async () => {\r\n        try {\r\n          const res = await fetch(`https://movie-database-imdb-alternative.p.rapidapi.com/?i=${movie.imdbID}`, {\r\n          \"method\": \"GET\",\r\n          \"headers\": {\r\n            \"x-rapidapi-key\": \"387e27d97fmsh8e24e62224ddd7bp139e87jsn4629eff6112a\",\r\n            \"x-rapidapi-host\": \"movie-database-imdb-alternative.p.rapidapi.com\"\r\n          }\r\n        })\r\n          const movieInfo = await res.json();\r\n          setSelectedMovie(movieInfo);\r\n          setModalShow(true);\r\n        } catch(err) {\r\n          console.log(err);\r\n        }\r\n      }\r\n\r\n    const isOnFavoritesList = () => {\r\n        for (let fav of favorites) {\r\n            if (movie.imdbID === fav.imdbID) {\r\n              return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div onClick={getMovieInfo} className='cardViewBlock'>\r\n                <div className='cardPoster'>\r\n                    <img src={movie.Poster} alt='poster' />\r\n                </div>\r\n                <div className='cardTitle'>\r\n                    <h5>{movie.Title}</h5>\r\n                </div>\r\n                <div className='cardType'>\r\n                    <h6>{movie.Type}</h6>\r\n                </div>\r\n                <div className='cardYear'>\r\n                    <h6>{movie.Year}</h6>\r\n                </div>\r\n                <div className='cardFavIcon'>\r\n                    <h1>{isOnFavoritesList() && !onFavoritesPage ? '*' : null}</h1>\r\n                </div>\r\n                {\r\n                    // Add a quick remove button to each result if on favorites page\r\n                    // On click, remove result from 'favorites' state variable\r\n                    onFavoritesPage\r\n                    ? <button onClick={() => removeFromFavorites(movie.imdbID)} className='quickRemoveCard'>X</button>\r\n                    : null\r\n                }\r\n            </div>\r\n            {/* Bootstrap modal component */}\r\n            <MoreInfo movie={selectedMovie} show={modalShow} onHide={() => setModalShow(false)} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CardViewMovie;\r\n","import ListViewMovie from '../listViewMovie/ListViewMovie';\r\nimport CardViewMovie from '../cardViewMovie/CardViewMovie';\r\nimport { useStoreState } from 'easy-peasy';\r\n\r\nconst MovieList = () => {\r\n    const { cardView, movieResults, onFavoritesPage, favorites } = useStoreState(state => ({\r\n        cardView: state.stored.cardView,\r\n        movieResults: state.movieResults,\r\n        onFavoritesPage: state.onFavoritesPage,\r\n        favorites: state.stored.favorites\r\n    }));\r\n\r\n    // Choose which movie array to use based on whether on search page or favorites page\r\n\r\n    const resultType = () => {\r\n        if (onFavoritesPage) {\r\n            return favorites\r\n        } else return movieResults\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n            resultType() !== undefined\r\n            ?\r\n                // Display individual movie components\r\n                // Choose between card view component or list view component based on 'cardView' state variable\r\n              resultType().map(movie => {\r\n                return(\r\n                    cardView\r\n                    ? <CardViewMovie key={movie.imdbID} movie={movie} />\r\n                    : <ListViewMovie key={movie.imdbID} movie={movie} />\r\n                )\r\n              })\r\n              : null\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MovieList;\r\n","import './ToggleViewIcon.css';\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\n\r\nconst ToggleViewIcon = () => {\r\n    const cardView = useStoreState(state => state.stored.cardView);\r\n    const toggleCardView = useStoreActions(actions => actions.toggleCardView)\r\n\r\n    // Choose icon configuration based on 'cardView' state variable\r\n    // Toggle between card view and list view when icon is clicked\r\n\r\n    return (\r\n        cardView === false\r\n        ?\r\n        <div onClick={toggleCardView} className='toggleViewIcon cardViewIcon'>\r\n            <div className='block'></div>\r\n            <div className='block'></div>\r\n            <div className='block'></div>\r\n            <div className='block'></div>\r\n            <div className='block'></div>\r\n            <div className='block'></div>\r\n            <div className='block'></div>\r\n            <div className='block'></div>\r\n            <div className='block'></div>\r\n        </div>\r\n        :\r\n        <div onClick={toggleCardView} className='toggleViewIcon listViewIcon'>\r\n            <div className='dot'></div>\r\n            <div className='line'></div>\r\n            <div className='dot'></div>\r\n            <div className='line'></div>\r\n            <div className='dot'></div>\r\n            <div className='line'></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToggleViewIcon;\r\n","import { useEffect } from 'react';\nimport { useStoreState, useStoreActions } from 'easy-peasy';\nimport MovieList from './components/movieList/MovieList';\nimport ToggleViewIcon from './components/toggleViewIcon/ToggleViewIcon';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport './App.css';\n\nfunction App() {\n  const { cardView, onFavoritesPage, currentSearch, favorites } = useStoreState(state => ({\n    cardView: state.stored.cardView,\n    onFavoritesPage: state.onFavoritesPage,\n    currentSearch: state.currentSearch,\n    favorites: state.stored.favorites\n  }));\n\n  const { setMovieResults, toggleOnFavoritesPage, setCurrentSearch } = useStoreActions(actions => ({\n    setMovieResults: actions.setMovieResults,\n    toggleOnFavoritesPage: actions.toggleOnFavoritesPage,\n    setCurrentSearch: actions.setCurrentSearch\n  }));\n\n  useEffect(() => {\n    const fav = document.querySelector('.favorites');\n    if (!onFavoritesPage) {\n      fav.style.setProperty(\"--favCount\", `\"${favorites.length}\"`);\n    }\n  }, [favorites])\n\n  useEffect(() => {\n    const fav = document.querySelector('.favorites');\n    if (!onFavoritesPage) {\n      fav.style.setProperty(\"--favCount\", `\"${favorites.length}\"`);\n    }\n  }, [onFavoritesPage])\n\n  // If search bar is not empty:\n  // Reset the current search\n  // Fetch matching results (based on title)\n  // Set the 'movieResults' state variable to the response\n\n  const findMovies = async () => {\n    if (currentSearch.length) {\n      setCurrentSearch('');\n      try {\n        const res = await fetch(`https://movie-database-imdb-alternative.p.rapidapi.com/?s=${currentSearch}`, {\n        \"method\": \"GET\",\n        \"headers\": {\n          \"x-rapidapi-key\": \"387e27d97fmsh8e24e62224ddd7bp139e87jsn4629eff6112a\",\n          \"x-rapidapi-host\": \"movie-database-imdb-alternative.p.rapidapi.com\"\n        }\n      })\n        const movies = await res.json();\n        setMovieResults(movies.Search);\n      } catch(err) {\n        console.log(err);\n      }\n    }\n  }\n\n  // Bind enter key to the search button\n\n  document.addEventListener(\"keydown\", (e) => {\n    if (e.keyCode === 13) {\n      e.preventDefault();\n      document.querySelector('.enter').click();\n    }\n  })\n\n  return (\n    <div className='appContainer'>\n      <header>\n        <div className='header'>\n          <div className='headerItems'>\n            {/* Toggle 'onFavoritesPage' state variable between true and false. Change btn text based on state' */}\n            <Button onClick={toggleOnFavoritesPage} variant=\"outline-secondary\" className={onFavoritesPage ? 'back' : 'favorites'}>{onFavoritesPage ? 'Back' : 'Favorites'}</Button>\n            <ToggleViewIcon />\n          </div>\n          <div className='searchAndFavorites'>\n            {/* Either show 'Favorites' text or the search section depending on 'onFavoritesPage' state variable */}\n            {\n            onFavoritesPage\n            ?\n            <div className='favoritesContainer'>\n              <h2 className='favText'>Favorites</h2>\n            </div>\n            :\n            <div className='searchBoxContainer'>\n              {/* Set 'currentSearch' state variable with input value */}\n              <input onChange={(e) => setCurrentSearch(e.target.value)} value={currentSearch} className='searchBox' type='text' placeholder='Enter a movie' />\n              <Button variant=\"outline-secondary\" onClick={findMovies} className='enter'>Search</Button>\n            </div>\n            }\n          </div>\n        </div>\n      </header>\n      <div className='grid'>\n        <div className='resultContainer'>\n          {/* Choose results layout based on 'cardView' state variable */}\n          <div className= {cardView ? 'cardContainer' : 'listContainer'}>\n            <MovieList />\n          </div>\n        </div>\n      </div>\n      <footer>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { StoreProvider, createStore } from 'easy-peasy';\nimport model from './model';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst store = createStore(model);\n\nReactDOM.render(\n    <StoreProvider store={store}>\n        <App />\n    </StoreProvider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}