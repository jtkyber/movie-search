{"version":3,"sources":["model.js","components/MoreInfo.js","components/ListViewMovie.js","components/CardViewMovie.js","components/MovieList.js","components/ToggleViewIcon.js","App.js","reportWebVitals.js","index.js"],"names":["model","stored","persist","cardView","favorites","storage","movieResults","selectedMovie","toggleCardView","action","state","setMovieResults","mList","setSelectedMovie","movie","addToFavorites","data","movieFound","imdbID","push","Poster","poster","Title","title","Type","type","Year","year","MoreInfo","props","m","useStoreActions","actions","Modal","size","centered","className","style","backgroundImage","Header","closeButton","id","Body","Plot","Actors","Genre","Director","Writer","Production","Awards","BoxOffice","Language","Rated","imdbRating","Footer","Button","variant","onClick","onHide","ListViewMovie","useState","modalShow","setModalShow","useStoreState","getMovieInfo","a","fetch","res","json","movieInfo","console","log","src","alt","show","CardViewMovie","MovieList","undefined","map","ToggleViewIcon","App","currentSearch","setCurrentSearch","findMovies","movies","Search","onChange","e","target","value","placeholder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.731cc67f.chunk.js","sourcesContent":["import { action, persist } from 'easy-peasy';\r\n\r\nconst model = {\r\n    // State\r\n\r\n    stored: persist(\r\n        {\r\n            cardView: false,\r\n            favorites: [],\r\n        },\r\n        {\r\n            storage: 'localStorage',\r\n        }\r\n    ),\r\n\r\n    movieResults: [],\r\n    selectedMovie: {},\r\n\r\n\r\n\r\n    // Actions\r\n\r\n    toggleCardView: action(state => {\r\n        state.stored.cardView = !state.stored.cardView;\r\n    }),\r\n\r\n    setMovieResults: action((state, mList) => {\r\n        state.movieResults = mList;\r\n    }),\r\n\r\n    setSelectedMovie: action((state, movie) => {\r\n        state.selectedMovie = movie;\r\n    }),\r\n\r\n    addToFavorites: action((state, data) => {\r\n        let movieFound = false;\r\n        for (let m of state.stored.favorites) {\r\n            if (m.imdbID === data.imdbID) {\r\n                movieFound = true;\r\n            }\r\n        }\r\n        if (!movieFound) {\r\n            state.stored.favorites.push(\r\n                {\r\n                    Poster: data.poster,\r\n                    Title: data.title,\r\n                    Type: data.type,\r\n                    Year: data.year,\r\n                    imdbID: data.imdbID\r\n                }\r\n            )\r\n        }\r\n    }),\r\n}\r\n\r\nexport default model;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// bySearch: [\r\n//         {\r\n//             Title: \"The Lord of the Rings: The Fellowship of the Ring\",\r\n//             Year: \"2001\",\r\n//             imdbID: \"tt0120737\",\r\n//             Type: \"movie\",\r\n//             Poster: \"https://m.media-amazon.com/images/M/MV5BN2EyZjM3NzUtNWUzMi00MTgxLWI0NTctMzY4M2VlOTdjZWRiXkEyXkFqcGdeQXVyNDUzOTQ5MjY@._V1_SX300.jpg\"\r\n//         },\r\n//         {\r\n//             Title: \"The Lord of the Rings: The Return of the King\",\r\n//             Year: \"2003\",\r\n//             imdbID: \"tt0167260\",\r\n//             Type: \"movie\",\r\n//             Poster: \"https://m.media-amazon.com/images/M/MV5BNzA5ZDNlZWMtM2NhNS00NDJjLTk4NDItYTRmY2EwMWZlMTY3XkEyXkFqcGdeQXVyNzkwMjQ5NzM@._V1_SX300.jpg\"\r\n//         },\r\n//         {\r\n//             Title: \"The Lord of the Rings: The Two Towers\",\r\n//             Year: \"2002\",\r\n//             imdbID: \"tt0167261\",\r\n//             Type: \"movie\",\r\n//             Poster: \"https://m.media-amazon.com/images/M/MV5BZGMxZTdjZmYtMmE2Ni00ZTdkLWI5NTgtNjlmMjBiNzU2MmI5XkEyXkFqcGdeQXVyNjU0OTQ0OTY@._V1_SX300.jpg\"\r\n//         },\r\n//         {\r\n//             Title: \"The Lord of the Rings: The Two Towers\",\r\n//             Year: \"2002\",\r\n//             imdbID: \"tt01672610\",\r\n//             Type: \"movie\",\r\n//             Poster: \"https://m.media-amazon.com/images/M/MV5BZGMxZTdjZmYtMmE2Ni00ZTdkLWI5NTgtNjlmMjBiNzU2MmI5XkEyXkFqcGdeQXVyNjU0OTQ0OTY@._V1_SX300.jpg\"\r\n//         },\r\n//         {\r\n//             Title: \"The Lord of the Rings: The Two Towers\",\r\n//             Year: \"2002\",\r\n//             imdbID: \"tt016726100\",\r\n//             Type: \"movie\",\r\n//             Poster: \"https://m.media-amazon.com/images/M/MV5BZGMxZTdjZmYtMmE2Ni00ZTdkLWI5NTgtNjlmMjBiNzU2MmI5XkEyXkFqcGdeQXVyNjU0OTQ0OTY@._V1_SX300.jpg\"\r\n//         },\r\n//         {\r\n//             Title: \"The Lord of the Rings: The Two Towers\",\r\n//             Year: \"2002\",\r\n//             imdbID: \"tt0167261000\",\r\n//             Type: \"movie\",\r\n//             Poster: \"https://m.media-amazon.com/images/M/MV5BZGMxZTdjZmYtMmE2Ni00ZTdkLWI5NTgtNjlmMjBiNzU2MmI5XkEyXkFqcGdeQXVyNjU0OTQ0OTY@._V1_SX300.jpg\"\r\n//         },\r\n//         {\r\n//             Title: \"The Lord of the Rings: The Two Towers\",\r\n//             Year: \"2002\",\r\n//             imdbID: \"tt01672610000\",\r\n//             Type: \"movie\",\r\n//             Poster: \"https://m.media-amazon.com/images/M/MV5BZGMxZTdjZmYtMmE2Ni00ZTdkLWI5NTgtNjlmMjBiNzU2MmI5XkEyXkFqcGdeQXVyNjU0OTQ0OTY@._V1_SX300.jpg\"\r\n//         },\r\n//         {\r\n//             Title: \"The Lord of the Rings: The Two Towers\",\r\n//             Year: \"2002\",\r\n//             imdbID: \"tt016726100000\",\r\n//             Type: \"movie\",\r\n//             Poster: \"https://m.media-amazon.com/images/M/MV5BZGMxZTdjZmYtMmE2Ni00ZTdkLWI5NTgtNjlmMjBiNzU2MmI5XkEyXkFqcGdeQXVyNjU0OTQ0OTY@._V1_SX300.jpg\"\r\n//         }\r\n//     ],\r\n//     byIdOrTitle: [\r\n//         {\r\n//             Title: \"The Lord of the Rings: The Fellowship of the Ring\",\r\n//             Year: \"2001\",\r\n//             Rated: \"PG-13\",\r\n//             Released: \"19 Dec 2001\",\r\n//             Runtime: \"178 min\",\r\n//             Genre: \"Action, Adventure, Drama\",\r\n//             Director: \"Peter Jackson\",\r\n//             Writer: \"J.R.R. Tolkien, Fran Walsh, Philippa Boyens\",\r\n//             Actors: \"Elijah Wood, Ian McKellen, Orlando Bloom\",\r\n//             Plot: \"A meek Hobbit from the Shire and eight companions set out on a journey to destroy the powerful One Ring and save Middle-earth from the Dark Lord Sauron.\",\r\n//             Language: \"English, Sindarin\",\r\n//             Country: \"New Zealand, United States\",\r\n//             Awards: \"Won 4 Oscars. 120 wins & 126 nominations total\",\r\n//             Poster: \"https://m.media-amazon.com/images/M/MV5BN2EyZjM3NzUtNWUzMi00MTgxLWI0NTctMzY4M2VlOTdjZWRiXkEyXkFqcGdeQXVyNDUzOTQ5MjY@._V1_SX300.jpg\",\r\n//             Ratings: [\r\n//                 {\r\n//                     Source:\"Internet Movie Database\",\r\n//                     Value:\"8.8/10\"\r\n//                 },\r\n//                 {\r\n//                     Source:\"Rotten Tomatoes\",\r\n//                     Value:\"91%\"\r\n//                 },\r\n//                 {\r\n//                     Source:\"Metacritic\",\r\n//                     Value:\"92/100\"\r\n//                 },\r\n//             ],\r\n//             Metascore:\"92\",\r\n//             imdbRating:\"8.8\",\r\n//             imdbVotes:\"1,706,179\",\r\n//             imdbID:\"tt0120737\",\r\n//             Type:\"movie\",\r\n//             DVD:\"28 Jun 2011\",\r\n//             BoxOffice:\"$315,710,750\",\r\n//             Production:\"New Line Cinema, Saul Zaentz Company, WingNut Films\"\r\n//         },\r\n//         {\r\n//             Title: \"The Lord of the Rings: The Fellowship of the Ring\",\r\n//             Year: \"2001\",\r\n//             Rated: \"PG-13\",\r\n//             Released: \"19 Dec 2001\",\r\n//             Runtime: \"178 min\",\r\n//             Genre: \"Action, Adventure, Drama\",\r\n//             Director: \"Peter Jackson\",\r\n//             Writer: \"J.R.R. Tolkien, Fran Walsh, Philippa Boyens\",\r\n//             Actors: \"Elijah Wood, Ian McKellen, Orlando Bloom\",\r\n//             Plot: \"A meek Hobbit from the Shire and eight companions set out on a journey to destroy the powerful One Ring and save Middle-earth from the Dark Lord Sauron.\",\r\n//             Language: \"English, Sindarin\",\r\n//             Country: \"New Zealand, United States\",\r\n//             Awards: \"Won 4 Oscars. 120 wins & 126 nominations total\",\r\n//             Poster: \"https://m.media-amazon.com/images/M/MV5BN2EyZjM3NzUtNWUzMi00MTgxLWI0NTctMzY4M2VlOTdjZWRiXkEyXkFqcGdeQXVyNDUzOTQ5MjY@._V1_SX300.jpg\",\r\n//             Ratings: [\r\n//                 {\r\n//                     Source:\"Internet Movie Database\",\r\n//                     Value:\"8.8/10\"\r\n//                 },\r\n//                 {\r\n//                     Source:\"Rotten Tomatoes\",\r\n//                     Value:\"91%\"\r\n//                 },\r\n//                 {\r\n//                     Source:\"Metacritic\",\r\n//                     Value:\"92/100\"\r\n//                 },\r\n//             ],\r\n//             Metascore:\"92\",\r\n//             imdbRating:\"8.8\",\r\n//             imdbVotes:\"1,706,179\",\r\n//             imdbID:\"tt0120737\",\r\n//             Type:\"movie\",\r\n//             DVD:\"28 Jun 2011\",\r\n//             BoxOffice:\"$315,710,750\",\r\n//             Production:\"New Line Cinema, Saul Zaentz Company, WingNut Films\"\r\n//         },\r\n//         {\r\n//             Title: \"The Lord of the Rings: The Fellowship of the Ring\",\r\n//             Year: \"2001\",\r\n//             Rated: \"PG-13\",\r\n//             Released: \"19 Dec 2001\",\r\n//             Runtime: \"178 min\",\r\n//             Genre: \"Action, Adventure, Drama\",\r\n//             Director: \"Peter Jackson\",\r\n//             Writer: \"J.R.R. Tolkien, Fran Walsh, Philippa Boyens\",\r\n//             Actors: \"Elijah Wood, Ian McKellen, Orlando Bloom\",\r\n//             Plot: \"A meek Hobbit from the Shire and eight companions set out on a journey to destroy the powerful One Ring and save Middle-earth from the Dark Lord Sauron.\",\r\n//             Language: \"English, Sindarin\",\r\n//             Country: \"New Zealand, United States\",\r\n//             Awards: \"Won 4 Oscars. 120 wins & 126 nominations total\",\r\n//             Poster: \"https://m.media-amazon.com/images/M/MV5BN2EyZjM3NzUtNWUzMi00MTgxLWI0NTctMzY4M2VlOTdjZWRiXkEyXkFqcGdeQXVyNDUzOTQ5MjY@._V1_SX300.jpg\",\r\n//             Ratings: [\r\n//                 {\r\n//                     Source:\"Internet Movie Database\",\r\n//                     Value:\"8.8/10\"\r\n//                 },\r\n//                 {\r\n//                     Source:\"Rotten Tomatoes\",\r\n//                     Value:\"91%\"\r\n//                 },\r\n//                 {\r\n//                     Source:\"Metacritic\",\r\n//                     Value:\"92/100\"\r\n//                 },\r\n//             ],\r\n//             Metascore:\"92\",\r\n//             imdbRating:\"8.8\",\r\n//             imdbVotes:\"1,706,179\",\r\n//             imdbID:\"tt0120737\",\r\n//             Type:\"movie\",\r\n//             DVD:\"28 Jun 2011\",\r\n//             BoxOffice:\"$315,710,750\",\r\n//             Production:\"New Line Cinema, Saul Zaentz Company, WingNut Films\"\r\n//         }\r\n//     ],\r\n","import { useStoreActions } from 'easy-peasy';\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport './MoreInfo.css';\r\n\r\nconst MoreInfo = (props) => {\r\n  const m = props.movie;\r\n  const addToFavorites = useStoreActions(actions => actions.addToFavorites);\r\n\r\n  return (\r\n      <Modal\r\n        {...props}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n      <div className='modalContainer' style={{backgroundImage: `url(${m.Poster})`}}>\r\n        <div className='backgroundTint'>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n              {m.Title}\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className='modalBody'>\r\n              <h5>{m.Type} ({m.Year})</h5>\r\n              <p>\r\n                <b>Plot:</b> {m.Plot}\r\n              </p>\r\n              <p>\r\n                <b>Actors:</b> {m.Actors}\r\n              </p>\r\n              <p>\r\n                <b>Genre:</b> {m.Genre}\r\n              </p>\r\n              <p>\r\n                <b>Director(s):</b> {m.Director}\r\n              </p>\r\n              <p>\r\n                <b>Writer(s):</b> {m.Writer}\r\n              </p>\r\n              <p>\r\n                <b>Production:</b> {m.Production}\r\n              </p>\r\n              <p>\r\n                <b>Awards:</b> {m.Awards}\r\n              </p>\r\n              <p>\r\n                <b>BoxOffice:</b> {m.BoxOffice}\r\n              </p>\r\n              <p>\r\n                <b>Language:</b> {m.Language}\r\n              </p>\r\n              <p>\r\n                <b>Rated:</b> {m.Rated}\r\n              </p>\r\n              <p>\r\n                <b>IMDB Rating:</b> {m.imdbRating}\r\n              </p>\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"success\"\r\n              onClick={() =>\r\n                addToFavorites({poster: m.Poster, title: m.Title, type: m.Type, year: m.Year, imdbID: m.imdbID})\r\n              }\r\n              className='modalFavorite'>Add to Favorites</Button>\r\n            <Button variant=\"secondary\" onClick={props.onHide}>Close</Button>\r\n          </Modal.Footer>\r\n        </div>\r\n      </div>\r\n      </Modal>\r\n  )\r\n}\r\n\r\nexport default MoreInfo;\r\n","import { useState } from 'react';\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\nimport MoreInfo from './MoreInfo';\r\nimport './ListViewMovie.css';\r\n\r\nconst ListViewMovie = ({ movie }) => {\r\n    const [modalShow, setModalShow] = useState(false);\r\n    const selectedMovie = useStoreState(state => state.selectedMovie);\r\n    const setSelectedMovie = useStoreActions(actions => actions.setSelectedMovie);\r\n\r\n    const getMovieInfo = async () => {\r\n        try {\r\n          const res = await fetch(`https://movie-database-imdb-alternative.p.rapidapi.com/?i=${movie.imdbID}`, {\r\n          \"method\": \"GET\",\r\n          \"headers\": {\r\n            \"x-rapidapi-key\": \"387e27d97fmsh8e24e62224ddd7bp139e87jsn4629eff6112a\",\r\n            \"x-rapidapi-host\": \"movie-database-imdb-alternative.p.rapidapi.com\"\r\n          }\r\n        })\r\n          const movieInfo = await res.json();\r\n          setSelectedMovie(movieInfo);\r\n          setModalShow(true);\r\n        } catch(err) {\r\n          console.log(err);\r\n        }\r\n      }\r\n\r\n    return (\r\n        <>\r\n            <div onClick={getMovieInfo} className='listViewBlock'>\r\n                <div className='listPoster'>\r\n                    <img src={movie.Poster} alt='poster' />\r\n                </div>\r\n                <div className='listTitle'>\r\n                    <h5>{movie.Title}</h5>\r\n                </div>\r\n                <div className='listType'>\r\n                    <h6>{movie.Type}</h6>\r\n                </div>\r\n                <div className='listYear'>\r\n                    <h6>{movie.Year}</h6>\r\n                </div>\r\n            </div>\r\n            <MoreInfo movie={selectedMovie} show={modalShow} onHide={() => setModalShow(false)} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ListViewMovie;\r\n","import { useState } from 'react';\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\nimport MoreInfo from './MoreInfo';\r\nimport './CardViewMovie.css';\r\n\r\nconst CardViewMovie = ({ movie }) => {\r\n    const [modalShow, setModalShow] = useState(false);\r\n    const selectedMovie = useStoreState(state => state.selectedMovie);\r\n    const setSelectedMovie = useStoreActions(actions => actions.setSelectedMovie);\r\n\r\n    const getMovieInfo = async () => {\r\n        try {\r\n          const res = await fetch(`https://movie-database-imdb-alternative.p.rapidapi.com/?i=${movie.imdbID}`, {\r\n          \"method\": \"GET\",\r\n          \"headers\": {\r\n            \"x-rapidapi-key\": \"387e27d97fmsh8e24e62224ddd7bp139e87jsn4629eff6112a\",\r\n            \"x-rapidapi-host\": \"movie-database-imdb-alternative.p.rapidapi.com\"\r\n          }\r\n        })\r\n          const movieInfo = await res.json();\r\n          setSelectedMovie(movieInfo);\r\n          setModalShow(true);\r\n        } catch(err) {\r\n          console.log(err);\r\n        }\r\n      }\r\n\r\n    return (\r\n        <>\r\n            <div onClick={getMovieInfo} className='cardViewBlock'>\r\n                <div className='cardPoster'>\r\n                    <img src={movie.Poster} alt='poster' />\r\n                </div>\r\n                <div className='cardTitle'>\r\n                    <h5>{movie.Title}</h5>\r\n                </div>\r\n                <div className='cardType'>\r\n                    <h6>{movie.Type}</h6>\r\n                </div>\r\n                <div className='cardYear'>\r\n                    <h6>{movie.Year}</h6>\r\n                </div>\r\n            </div>\r\n            <MoreInfo movie={selectedMovie} show={modalShow} onHide={() => setModalShow(false)} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CardViewMovie;\r\n","import ListViewMovie from './ListViewMovie';\r\nimport CardViewMovie from './CardViewMovie';\r\nimport { useStoreState } from 'easy-peasy';\r\n\r\nconst MovieList = () => {\r\n    const { cardView, movieResults } = useStoreState(state => ({\r\n        cardView: state.stored.cardView,\r\n        movieResults: state.movieResults\r\n    }));\r\n\r\n    return (\r\n        <>\r\n            {\r\n            movieResults !== undefined\r\n            ?\r\n              movieResults.map(movie => {\r\n                return(\r\n                    cardView\r\n                    ? <CardViewMovie key={movie.imdbID} movie={movie} />\r\n                    : <ListViewMovie key={movie.imdbID} movie={movie} />\r\n                )\r\n              })\r\n              : null\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MovieList;\r\n","import './ToggleViewIcon.css';\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\n\r\nconst ToggleViewIcon = () => {\r\n    const cardView = useStoreState(state => state.stored.cardView);\r\n    const toggleCardView = useStoreActions(actions => actions.toggleCardView)\r\n\r\n    return (\r\n        cardView === false\r\n        ?\r\n        <div onClick={toggleCardView} className='toggleViewIcon cardViewIcon'>\r\n            <div className='block'></div>\r\n            <div className='block'></div>\r\n            <div className='block'></div>\r\n            <div className='block'></div>\r\n            <div className='block'></div>\r\n            <div className='block'></div>\r\n            <div className='block'></div>\r\n            <div className='block'></div>\r\n            <div className='block'></div>\r\n        </div>\r\n        :\r\n        <div onClick={toggleCardView} className='toggleViewIcon listViewIcon'>\r\n            <div className='dot'></div>\r\n            <div className='line'></div>\r\n            <div className='dot'></div>\r\n            <div className='line'></div>\r\n            <div className='dot'></div>\r\n            <div className='line'></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToggleViewIcon;\r\n","import { useState } from 'react';\nimport { useStoreState, useStoreActions } from 'easy-peasy';\nimport MovieList from './components/MovieList';\nimport ToggleViewIcon from './components/ToggleViewIcon';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nfunction App() {\n  const cardView = useStoreState(state => state.stored.cardView);\n  // const favorites = useStoreState(state => state.stored.favorites);\n  const setMovieResults = useStoreActions(actions => actions.setMovieResults);\n  const [currentSearch, setCurrentSearch] = useState('');\n\n  const findMovies = async () => {\n    setCurrentSearch('');\n    try {\n      const res = await fetch(`https://movie-database-imdb-alternative.p.rapidapi.com/?s=${currentSearch}`, {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-key\": \"387e27d97fmsh8e24e62224ddd7bp139e87jsn4629eff6112a\",\n        \"x-rapidapi-host\": \"movie-database-imdb-alternative.p.rapidapi.com\"\n      }\n    })\n      const movies = await res.json();\n      setMovieResults(movies.Search);\n    } catch(err) {\n      console.log(err);\n    }\n  }\n\n  return (\n    <div className='appContainer'>\n      <header>\n        <div className='header'></div>\n      </header>\n      <div className='grid'>\n        <div className='searchBoxContainer'>\n          <input onChange={(e) => setCurrentSearch(e.target.value)} value={currentSearch} className='searchBox' type='text' placeholder='Search for a Movie' />\n          <button onClick={findMovies} className='enter'>Enter</button>\n          <button className='favorites'>Favorites</button>\n          <ToggleViewIcon />\n        </div>\n        <div className='resultContainer'>\n          <div className= {cardView ? 'cardContainer' : 'listContainer'}>\n            <MovieList />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { StoreProvider, createStore } from 'easy-peasy';\nimport model from './model';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst store = createStore(model);\n\nReactDOM.render(\n    <StoreProvider store={store}>\n        <App />\n    </StoreProvider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}