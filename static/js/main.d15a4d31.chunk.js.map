{"version":3,"sources":["model.js","components/MoreInfo.js","components/ListViewMovie.js","components/CardViewMovie.js","components/MovieList.js","components/ToggleViewIcon.js","App.js","reportWebVitals.js","index.js"],"names":["model","stored","persist","cardView","favorites","storage","movieResults","selectedMovie","onFavoritesPage","toggleCardView","action","state","setMovieResults","mList","setSelectedMovie","movie","addToFavorites","data","movieFound","imdbID","push","Poster","poster","Title","title","Type","type","Year","year","removeFromFavorites","id","favs","i","length","splice","toggleOnFavoritesPage","MoreInfo","props","m","useStoreState","useStoreActions","actions","useState","isFavorite","setIsFavorite","useEffect","show","Modal","size","centered","className","style","backgroundImage","Header","closeButton","Body","Plot","Actors","Genre","Director","Writer","Production","Awards","BoxOffice","Language","Rated","imdbRating","Footer","Button","variant","onClick","onHide","ListViewMovie","modalShow","setModalShow","getMovieInfo","a","fetch","res","json","movieInfo","console","log","src","alt","CardViewMovie","MovieList","resultType","undefined","map","ToggleViewIcon","App","currentSearch","setCurrentSearch","findMovies","movies","Search","document","addEventListener","e","keyCode","preventDefault","querySelector","click","onChange","target","value","placeholder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.d15a4d31.chunk.js","sourcesContent":["import { action, persist } from 'easy-peasy';\r\n\r\nconst model = {\r\n    // State\r\n\r\n    stored: persist(\r\n        {\r\n            cardView: false,\r\n            favorites: [],\r\n        },\r\n        {\r\n            storage: 'localStorage',\r\n        }\r\n    ),\r\n\r\n    movieResults: [],\r\n    selectedMovie: {},\r\n    onFavoritesPage: false,\r\n\r\n\r\n\r\n    // Actions\r\n\r\n    toggleCardView: action(state => {\r\n        state.stored.cardView = !state.stored.cardView;\r\n    }),\r\n\r\n    setMovieResults: action((state, mList) => {\r\n        state.movieResults = mList;\r\n    }),\r\n\r\n    setSelectedMovie: action((state, movie) => {\r\n        state.selectedMovie = movie;\r\n    }),\r\n\r\n    addToFavorites: action((state, data) => {\r\n        let movieFound = false;\r\n        for (let m of state.stored.favorites) {\r\n            if (m.imdbID === data.imdbID) {\r\n                movieFound = true;\r\n            }\r\n        }\r\n        if (!movieFound) {\r\n            state.stored.favorites.push(\r\n                {\r\n                    Poster: data.poster,\r\n                    Title: data.title,\r\n                    Type: data.type,\r\n                    Year: data.year,\r\n                    imdbID: data.imdbID\r\n                }\r\n            )\r\n        }\r\n    }),\r\n\r\n    removeFromFavorites: action((state, id) => {\r\n        const favs = state.stored.favorites;\r\n        for (let i = 0; i < favs.length; i++) {\r\n            if (favs[i].imdbID === id) {\r\n                favs.splice(i, 1);\r\n            }\r\n        }\r\n    }),\r\n\r\n    toggleOnFavoritesPage: action(state => {\r\n        state.onFavoritesPage = !state.onFavoritesPage;\r\n    }),\r\n}\r\n\r\nexport default model;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// bySearch: [\r\n//         {\r\n//             Title: \"The Lord of the Rings: The Fellowship of the Ring\",\r\n//             Year: \"2001\",\r\n//             imdbID: \"tt0120737\",\r\n//             Type: \"movie\",\r\n//             Poster: \"https://m.media-amazon.com/images/M/MV5BN2EyZjM3NzUtNWUzMi00MTgxLWI0NTctMzY4M2VlOTdjZWRiXkEyXkFqcGdeQXVyNDUzOTQ5MjY@._V1_SX300.jpg\"\r\n//         },\r\n//         {\r\n//             Title: \"The Lord of the Rings: The Return of the King\",\r\n//             Year: \"2003\",\r\n//             imdbID: \"tt0167260\",\r\n//             Type: \"movie\",\r\n//             Poster: \"https://m.media-amazon.com/images/M/MV5BNzA5ZDNlZWMtM2NhNS00NDJjLTk4NDItYTRmY2EwMWZlMTY3XkEyXkFqcGdeQXVyNzkwMjQ5NzM@._V1_SX300.jpg\"\r\n//         },\r\n//         {\r\n//             Title: \"The Lord of the Rings: The Two Towers\",\r\n//             Year: \"2002\",\r\n//             imdbID: \"tt0167261\",\r\n//             Type: \"movie\",\r\n//             Poster: \"https://m.media-amazon.com/images/M/MV5BZGMxZTdjZmYtMmE2Ni00ZTdkLWI5NTgtNjlmMjBiNzU2MmI5XkEyXkFqcGdeQXVyNjU0OTQ0OTY@._V1_SX300.jpg\"\r\n//         },\r\n//         {\r\n//             Title: \"The Lord of the Rings: The Two Towers\",\r\n//             Year: \"2002\",\r\n//             imdbID: \"tt01672610\",\r\n//             Type: \"movie\",\r\n//             Poster: \"https://m.media-amazon.com/images/M/MV5BZGMxZTdjZmYtMmE2Ni00ZTdkLWI5NTgtNjlmMjBiNzU2MmI5XkEyXkFqcGdeQXVyNjU0OTQ0OTY@._V1_SX300.jpg\"\r\n//         },\r\n//         {\r\n//             Title: \"The Lord of the Rings: The Two Towers\",\r\n//             Year: \"2002\",\r\n//             imdbID: \"tt016726100\",\r\n//             Type: \"movie\",\r\n//             Poster: \"https://m.media-amazon.com/images/M/MV5BZGMxZTdjZmYtMmE2Ni00ZTdkLWI5NTgtNjlmMjBiNzU2MmI5XkEyXkFqcGdeQXVyNjU0OTQ0OTY@._V1_SX300.jpg\"\r\n//         },\r\n//         {\r\n//             Title: \"The Lord of the Rings: The Two Towers\",\r\n//             Year: \"2002\",\r\n//             imdbID: \"tt0167261000\",\r\n//             Type: \"movie\",\r\n//             Poster: \"https://m.media-amazon.com/images/M/MV5BZGMxZTdjZmYtMmE2Ni00ZTdkLWI5NTgtNjlmMjBiNzU2MmI5XkEyXkFqcGdeQXVyNjU0OTQ0OTY@._V1_SX300.jpg\"\r\n//         },\r\n//         {\r\n//             Title: \"The Lord of the Rings: The Two Towers\",\r\n//             Year: \"2002\",\r\n//             imdbID: \"tt01672610000\",\r\n//             Type: \"movie\",\r\n//             Poster: \"https://m.media-amazon.com/images/M/MV5BZGMxZTdjZmYtMmE2Ni00ZTdkLWI5NTgtNjlmMjBiNzU2MmI5XkEyXkFqcGdeQXVyNjU0OTQ0OTY@._V1_SX300.jpg\"\r\n//         },\r\n//         {\r\n//             Title: \"The Lord of the Rings: The Two Towers\",\r\n//             Year: \"2002\",\r\n//             imdbID: \"tt016726100000\",\r\n//             Type: \"movie\",\r\n//             Poster: \"https://m.media-amazon.com/images/M/MV5BZGMxZTdjZmYtMmE2Ni00ZTdkLWI5NTgtNjlmMjBiNzU2MmI5XkEyXkFqcGdeQXVyNjU0OTQ0OTY@._V1_SX300.jpg\"\r\n//         }\r\n//     ],\r\n//     byIdOrTitle: [\r\n//         {\r\n//             Title: \"The Lord of the Rings: The Fellowship of the Ring\",\r\n//             Year: \"2001\",\r\n//             Rated: \"PG-13\",\r\n//             Released: \"19 Dec 2001\",\r\n//             Runtime: \"178 min\",\r\n//             Genre: \"Action, Adventure, Drama\",\r\n//             Director: \"Peter Jackson\",\r\n//             Writer: \"J.R.R. Tolkien, Fran Walsh, Philippa Boyens\",\r\n//             Actors: \"Elijah Wood, Ian McKellen, Orlando Bloom\",\r\n//             Plot: \"A meek Hobbit from the Shire and eight companions set out on a journey to destroy the powerful One Ring and save Middle-earth from the Dark Lord Sauron.\",\r\n//             Language: \"English, Sindarin\",\r\n//             Country: \"New Zealand, United States\",\r\n//             Awards: \"Won 4 Oscars. 120 wins & 126 nominations total\",\r\n//             Poster: \"https://m.media-amazon.com/images/M/MV5BN2EyZjM3NzUtNWUzMi00MTgxLWI0NTctMzY4M2VlOTdjZWRiXkEyXkFqcGdeQXVyNDUzOTQ5MjY@._V1_SX300.jpg\",\r\n//             Ratings: [\r\n//                 {\r\n//                     Source:\"Internet Movie Database\",\r\n//                     Value:\"8.8/10\"\r\n//                 },\r\n//                 {\r\n//                     Source:\"Rotten Tomatoes\",\r\n//                     Value:\"91%\"\r\n//                 },\r\n//                 {\r\n//                     Source:\"Metacritic\",\r\n//                     Value:\"92/100\"\r\n//                 },\r\n//             ],\r\n//             Metascore:\"92\",\r\n//             imdbRating:\"8.8\",\r\n//             imdbVotes:\"1,706,179\",\r\n//             imdbID:\"tt0120737\",\r\n//             Type:\"movie\",\r\n//             DVD:\"28 Jun 2011\",\r\n//             BoxOffice:\"$315,710,750\",\r\n//             Production:\"New Line Cinema, Saul Zaentz Company, WingNut Films\"\r\n//         },\r\n//         {\r\n//             Title: \"The Lord of the Rings: The Fellowship of the Ring\",\r\n//             Year: \"2001\",\r\n//             Rated: \"PG-13\",\r\n//             Released: \"19 Dec 2001\",\r\n//             Runtime: \"178 min\",\r\n//             Genre: \"Action, Adventure, Drama\",\r\n//             Director: \"Peter Jackson\",\r\n//             Writer: \"J.R.R. Tolkien, Fran Walsh, Philippa Boyens\",\r\n//             Actors: \"Elijah Wood, Ian McKellen, Orlando Bloom\",\r\n//             Plot: \"A meek Hobbit from the Shire and eight companions set out on a journey to destroy the powerful One Ring and save Middle-earth from the Dark Lord Sauron.\",\r\n//             Language: \"English, Sindarin\",\r\n//             Country: \"New Zealand, United States\",\r\n//             Awards: \"Won 4 Oscars. 120 wins & 126 nominations total\",\r\n//             Poster: \"https://m.media-amazon.com/images/M/MV5BN2EyZjM3NzUtNWUzMi00MTgxLWI0NTctMzY4M2VlOTdjZWRiXkEyXkFqcGdeQXVyNDUzOTQ5MjY@._V1_SX300.jpg\",\r\n//             Ratings: [\r\n//                 {\r\n//                     Source:\"Internet Movie Database\",\r\n//                     Value:\"8.8/10\"\r\n//                 },\r\n//                 {\r\n//                     Source:\"Rotten Tomatoes\",\r\n//                     Value:\"91%\"\r\n//                 },\r\n//                 {\r\n//                     Source:\"Metacritic\",\r\n//                     Value:\"92/100\"\r\n//                 },\r\n//             ],\r\n//             Metascore:\"92\",\r\n//             imdbRating:\"8.8\",\r\n//             imdbVotes:\"1,706,179\",\r\n//             imdbID:\"tt0120737\",\r\n//             Type:\"movie\",\r\n//             DVD:\"28 Jun 2011\",\r\n//             BoxOffice:\"$315,710,750\",\r\n//             Production:\"New Line Cinema, Saul Zaentz Company, WingNut Films\"\r\n//         },\r\n//         {\r\n//             Title: \"The Lord of the Rings: The Fellowship of the Ring\",\r\n//             Year: \"2001\",\r\n//             Rated: \"PG-13\",\r\n//             Released: \"19 Dec 2001\",\r\n//             Runtime: \"178 min\",\r\n//             Genre: \"Action, Adventure, Drama\",\r\n//             Director: \"Peter Jackson\",\r\n//             Writer: \"J.R.R. Tolkien, Fran Walsh, Philippa Boyens\",\r\n//             Actors: \"Elijah Wood, Ian McKellen, Orlando Bloom\",\r\n//             Plot: \"A meek Hobbit from the Shire and eight companions set out on a journey to destroy the powerful One Ring and save Middle-earth from the Dark Lord Sauron.\",\r\n//             Language: \"English, Sindarin\",\r\n//             Country: \"New Zealand, United States\",\r\n//             Awards: \"Won 4 Oscars. 120 wins & 126 nominations total\",\r\n//             Poster: \"https://m.media-amazon.com/images/M/MV5BN2EyZjM3NzUtNWUzMi00MTgxLWI0NTctMzY4M2VlOTdjZWRiXkEyXkFqcGdeQXVyNDUzOTQ5MjY@._V1_SX300.jpg\",\r\n//             Ratings: [\r\n//                 {\r\n//                     Source:\"Internet Movie Database\",\r\n//                     Value:\"8.8/10\"\r\n//                 },\r\n//                 {\r\n//                     Source:\"Rotten Tomatoes\",\r\n//                     Value:\"91%\"\r\n//                 },\r\n//                 {\r\n//                     Source:\"Metacritic\",\r\n//                     Value:\"92/100\"\r\n//                 },\r\n//             ],\r\n//             Metascore:\"92\",\r\n//             imdbRating:\"8.8\",\r\n//             imdbVotes:\"1,706,179\",\r\n//             imdbID:\"tt0120737\",\r\n//             Type:\"movie\",\r\n//             DVD:\"28 Jun 2011\",\r\n//             BoxOffice:\"$315,710,750\",\r\n//             Production:\"New Line Cinema, Saul Zaentz Company, WingNut Films\"\r\n//         }\r\n//     ],\r\n","import { useState, useEffect } from 'react';\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport './MoreInfo.css';\r\n\r\nconst MoreInfo = (props) => {\r\n  const m = props.movie;\r\n  const favorites = useStoreState(state => state.stored.favorites);\r\n  const {addToFavorites, removeFromFavorites} = useStoreActions(actions => ({\r\n    addToFavorites: actions.addToFavorites,\r\n    removeFromFavorites: actions.removeFromFavorites\r\n  }));\r\n  const [isFavorite, setIsFavorite] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (props.show === true)\r\n    {\r\n      for (let movie of favorites) {\r\n        if (m.imdbID === movie.imdbID) {\r\n          return setIsFavorite(true);\r\n        }\r\n      }\r\n      setIsFavorite(false);\r\n    }\r\n  }, [props.show])\r\n\r\n  const updateFavorites = () => {\r\n    if(!isFavorite) {\r\n      addToFavorites({poster: m.Poster, title: m.Title, type: m.Type, year: m.Year, imdbID: m.imdbID})\r\n      setIsFavorite(true);\r\n    } else {\r\n      removeFromFavorites(m.imdbID);\r\n      setIsFavorite(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n      <Modal\r\n        {...props}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n      <div className='modalContainer' style={{backgroundImage: `url(${m.Poster})`}}>\r\n        <div className='backgroundTint'>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title id=\"contained-modal-title-vcenter\">\r\n              {m.Title}\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div className='modalBody'>\r\n              <h5>{m.Type} ({m.Year})</h5>\r\n              <p>\r\n                <b>Plot:</b> {m.Plot}\r\n              </p>\r\n              <p>\r\n                <b>Actors:</b> {m.Actors}\r\n              </p>\r\n              <p>\r\n                <b>Genre:</b> {m.Genre}\r\n              </p>\r\n              <p>\r\n                <b>Director(s):</b> {m.Director}\r\n              </p>\r\n              <p>\r\n                <b>Writer(s):</b> {m.Writer}\r\n              </p>\r\n              <p>\r\n                <b>Production:</b> {m.Production}\r\n              </p>\r\n              <p>\r\n                <b>Awards:</b> {m.Awards}\r\n              </p>\r\n              <p>\r\n                <b>BoxOffice:</b> {m.BoxOffice}\r\n              </p>\r\n              <p>\r\n                <b>Language:</b> {m.Language}\r\n              </p>\r\n              <p>\r\n                <b>Rated:</b> {m.Rated}\r\n              </p>\r\n              <p>\r\n                <b>IMDB Rating:</b> {m.imdbRating}\r\n              </p>\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button\r\n              variant={!isFavorite ? \"success\" :  \"danger\"}\r\n              onClick={updateFavorites}\r\n              className={!isFavorite ? \"addfavoriteBtn\" :  \"removefavoriteBtn\"}>\r\n              {!isFavorite ? 'Add to Favorites' :  \"Remove from Favorites\"}\r\n              </Button>\r\n            <Button variant=\"secondary\" onClick={props.onHide}>Close</Button>\r\n          </Modal.Footer>\r\n        </div>\r\n      </div>\r\n      </Modal>\r\n  )\r\n}\r\n\r\nexport default MoreInfo;\r\n","import { useState } from 'react';\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\nimport MoreInfo from './MoreInfo';\r\nimport './ListViewMovie.css';\r\n\r\nconst ListViewMovie = ({ movie }) => {\r\n    const [modalShow, setModalShow] = useState(false);\r\n    const { selectedMovie, onFavoritesPage} = useStoreState(state => ({\r\n        selectedMovie: state.selectedMovie,\r\n        onFavoritesPage: state.onFavoritesPage\r\n    }));\r\n    const { removeFromFavorites, setSelectedMovie} = useStoreActions(actions => ({\r\n        removeFromFavorites: actions.removeFromFavorites,\r\n        setSelectedMovie: actions.setSelectedMovie\r\n    }));\r\n\r\n    const getMovieInfo = async () => {\r\n        try {\r\n          const res = await fetch(`https://movie-database-imdb-alternative.p.rapidapi.com/?i=${movie.imdbID}`, {\r\n          \"method\": \"GET\",\r\n          \"headers\": {\r\n            \"x-rapidapi-key\": \"387e27d97fmsh8e24e62224ddd7bp139e87jsn4629eff6112a\",\r\n            \"x-rapidapi-host\": \"movie-database-imdb-alternative.p.rapidapi.com\"\r\n          }\r\n        })\r\n          const movieInfo = await res.json();\r\n          setSelectedMovie(movieInfo);\r\n          setModalShow(true);\r\n        } catch(err) {\r\n          console.log(err);\r\n        }\r\n      }\r\n\r\n    return (\r\n        <>\r\n            <div onClick={getMovieInfo} className='listViewBlock'>\r\n                <div className='listPoster'>\r\n                    <img src={movie.Poster} alt='poster' />\r\n                </div>\r\n                <div className='listTitle'>\r\n                    <h5>{movie.Title}</h5>\r\n                </div>\r\n                <div className='listType'>\r\n                    <h6>{movie.Type}</h6>\r\n                </div>\r\n                <div className='listYear'>\r\n                    <h6>{movie.Year}</h6>\r\n                </div>\r\n                {\r\n                    onFavoritesPage\r\n                    ? <button onClick={() => removeFromFavorites(movie.imdbID)} className='quickRemoveList'>X</button>\r\n                    : null\r\n                }\r\n            </div>\r\n            <MoreInfo movie={selectedMovie} show={modalShow} onHide={() => setModalShow(false)} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ListViewMovie;\r\n","import { useState } from 'react';\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\nimport MoreInfo from './MoreInfo';\r\nimport './CardViewMovie.css';\r\n\r\nconst CardViewMovie = ({ movie }) => {\r\n    const [modalShow, setModalShow] = useState(false);\r\n    const { selectedMovie, onFavoritesPage} = useStoreState(state => ({\r\n        selectedMovie: state.selectedMovie,\r\n        onFavoritesPage: state.onFavoritesPage\r\n    }));\r\n    const { removeFromFavorites, setSelectedMovie} = useStoreActions(actions => ({\r\n        removeFromFavorites: actions.removeFromFavorites,\r\n        setSelectedMovie: actions.setSelectedMovie\r\n    }));\r\n\r\n    const getMovieInfo = async () => {\r\n        try {\r\n          const res = await fetch(`https://movie-database-imdb-alternative.p.rapidapi.com/?i=${movie.imdbID}`, {\r\n          \"method\": \"GET\",\r\n          \"headers\": {\r\n            \"x-rapidapi-key\": \"387e27d97fmsh8e24e62224ddd7bp139e87jsn4629eff6112a\",\r\n            \"x-rapidapi-host\": \"movie-database-imdb-alternative.p.rapidapi.com\"\r\n          }\r\n        })\r\n          const movieInfo = await res.json();\r\n          setSelectedMovie(movieInfo);\r\n          setModalShow(true);\r\n        } catch(err) {\r\n          console.log(err);\r\n        }\r\n      }\r\n\r\n    return (\r\n        <>\r\n            <div onClick={getMovieInfo} className='cardViewBlock'>\r\n            {\r\n                onFavoritesPage\r\n                ? <button onClick={() => removeFromFavorites(movie.imdbID)} className='quickRemoveCard'>X</button>\r\n                : null\r\n            }\r\n                <div className='cardPoster'>\r\n                    <img src={movie.Poster} alt='poster' />\r\n                </div>\r\n                <div className='cardTitle'>\r\n                    <h5>{movie.Title}</h5>\r\n                </div>\r\n                <div className='cardType'>\r\n                    <h6>{movie.Type}</h6>\r\n                </div>\r\n                <div className='cardYear'>\r\n                    <h6>{movie.Year}</h6>\r\n                </div>\r\n            </div>\r\n            <MoreInfo movie={selectedMovie} show={modalShow} onHide={() => setModalShow(false)} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CardViewMovie;\r\n","import ListViewMovie from './ListViewMovie';\r\nimport CardViewMovie from './CardViewMovie';\r\nimport { useStoreState } from 'easy-peasy';\r\n\r\nconst MovieList = () => {\r\n    const { cardView, movieResults, onFavoritesPage, favorites } = useStoreState(state => ({\r\n        cardView: state.stored.cardView,\r\n        movieResults: state.movieResults,\r\n        onFavoritesPage: state.onFavoritesPage,\r\n        favorites: state.stored.favorites\r\n    }));\r\n\r\n    const resultType = () => {\r\n        if (onFavoritesPage) {\r\n            return favorites\r\n        } else return movieResults\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n            resultType() !== undefined\r\n            ?\r\n              resultType().map(movie => {\r\n                return(\r\n                    cardView\r\n                    ? <CardViewMovie key={movie.imdbID} movie={movie} />\r\n                    : <ListViewMovie key={movie.imdbID} movie={movie} />\r\n                )\r\n              })\r\n              : null\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MovieList;\r\n","import './ToggleViewIcon.css';\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\n\r\nconst ToggleViewIcon = () => {\r\n    const cardView = useStoreState(state => state.stored.cardView);\r\n    const toggleCardView = useStoreActions(actions => actions.toggleCardView)\r\n\r\n    return (\r\n        cardView === false\r\n        ?\r\n        <div onClick={toggleCardView} className='toggleViewIcon cardViewIcon'>\r\n            <div className='block'></div>\r\n            <div className='block'></div>\r\n            <div className='block'></div>\r\n            <div className='block'></div>\r\n            <div className='block'></div>\r\n            <div className='block'></div>\r\n            <div className='block'></div>\r\n            <div className='block'></div>\r\n            <div className='block'></div>\r\n        </div>\r\n        :\r\n        <div onClick={toggleCardView} className='toggleViewIcon listViewIcon'>\r\n            <div className='dot'></div>\r\n            <div className='line'></div>\r\n            <div className='dot'></div>\r\n            <div className='line'></div>\r\n            <div className='dot'></div>\r\n            <div className='line'></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToggleViewIcon;\r\n","import { useState } from 'react';\nimport { useStoreState, useStoreActions } from 'easy-peasy';\nimport MovieList from './components/MovieList';\nimport ToggleViewIcon from './components/ToggleViewIcon';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport './App.css';\n\nfunction App() {\n  const { cardView, onFavoritesPage } = useStoreState(state => ({\n    cardView: state.stored.cardView,\n    onFavoritesPage: state.onFavoritesPage\n  }));\n\n  const { setMovieResults, toggleOnFavoritesPage } = useStoreActions(actions => ({\n    setMovieResults: actions.setMovieResults,\n    toggleOnFavoritesPage: actions.toggleOnFavoritesPage\n  }));\n\n  const [currentSearch, setCurrentSearch] = useState('');\n\n  const findMovies = async () => {\n    if (currentSearch.length) {\n      setCurrentSearch('');\n      try {\n        const res = await fetch(`https://movie-database-imdb-alternative.p.rapidapi.com/?s=${currentSearch}`, {\n        \"method\": \"GET\",\n        \"headers\": {\n          \"x-rapidapi-key\": \"387e27d97fmsh8e24e62224ddd7bp139e87jsn4629eff6112a\",\n          \"x-rapidapi-host\": \"movie-database-imdb-alternative.p.rapidapi.com\"\n        }\n      })\n        const movies = await res.json();\n        setMovieResults(movies.Search);\n      } catch(err) {\n        console.log(err);\n      }\n    }\n  }\n\n  document.addEventListener(\"keydown\", (e) => {\n    if (e.keyCode === 13) {\n      e.preventDefault();\n      document.querySelector('.enter').click();\n    }\n  })\n\n  return (\n    <div className='appContainer'>\n      <header>\n        <div className='header'>\n          <div className='headerItems'>\n            <Button onClick={toggleOnFavoritesPage} variant=\"outline-secondary\" className='favorites'>{onFavoritesPage ? 'Back' : 'Favorites'}</Button>\n            <ToggleViewIcon />\n          </div>\n          <div className='searchAndFavorites'>\n            {\n            onFavoritesPage\n            ?\n            <div className='favoritesContainer'>\n              <h2 className='favText'>Favorites</h2>\n            </div>\n            :\n            <div className='searchBoxContainer'>\n              <input onChange={(e) => setCurrentSearch(e.target.value)} value={currentSearch} className='searchBox' type='text' placeholder='Search for a movie, show, game, etc...' />\n              <Button variant=\"outline-secondary\" onClick={findMovies} className='enter'>Search</Button>\n            </div>\n            }\n          </div>\n        </div>\n      </header>\n      <div className='grid'>\n        <div className='resultContainer'>\n          <div className= {cardView ? 'cardContainer' : 'listContainer'}>\n            <MovieList />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { StoreProvider, createStore } from 'easy-peasy';\nimport model from './model';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst store = createStore(model);\n\nReactDOM.render(\n    <StoreProvider store={store}>\n        <App />\n    </StoreProvider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}